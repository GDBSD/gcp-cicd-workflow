
# Each step specified in the cloudbuild.yaml is a separate, ephemeral run of a docker image.artifacts:
# As an aid to someone unfamiliar with Docker just about every element in this file
# is documented.

# Mastering Google Cloud Build Config Syntax
# https://medium.com/@davidstanke/mastering-google-cloud-build-config-syntax-8c3024607daf

# Syntax comments:
#   "entrypoint" configures a container that will run as an executable.
#  "/bin/bash" In an Ubuntu command used to link to bash.artifacts:
#  The "-c" bin/bash argument overrides the rest of the command line from that point on,
      # so that it's no longer going through bash's option handling.artifacts:
#  The "-m" Python argument is the module name. Python searches sys.path for the named module
     # and execute its contents as the __main__ module

steps:
  # Step 0 - Create the environment
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: '/bin/bash'
  args:
    [
      '-c',
      'python3 -m venv /workspace/gcp_cicd'
    ]

  # Step 1 - Clone the GitHub repo
- name: 'gcr.io/cloud-builders/git'
  args:
    [
      'clone', '--recurse-submodules',
      'https://github.com/GDBSD/gcp-cicd-workflow'
    ]

  # Step 2 - Checkout the branch we just pushed
  # Variable $COMMIT_SHA provided by the Cloud Build so we test the correct commit.
- name: 'gcr.io/cloud-builders/git'
  args:
    [
      'checkout',
      '$COMMIT_SHA'
    ]
  dir: 'gcp-cicd-workflow'

  # Step 3 - Install the dependencies
  # Installs any dependencies listed in the project's requirements.txt.
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: 'gcp_cicd/bin/pip'
  args:
    [
      'install',
      '-V',
      '-r',
      'requirements.txt'
    ]

  # Step 4
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: '/bin/bash'
  args:
    [
      '-c',
      'python3', 'import os'
    ]


#- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
#  entrypoint: 'gcp_cicd/bin/python'
#  args:
#    [
#      '-c',
#      '-m', 'pytest', '-v', '-x'
#    ]

#  # Step 4
#  # Runs pytest from the virtual environment (with all requirements)
#  # using the verbose flag so you can see each individual test.
#- name: 'ubuntu'
#  entrypoint: '/bin/bash'
#  args:
#    [
#      '-c', 'ls'
##      '[ -d /tests ] && echo "Directory found" || echo "Directory /tmp not found"'
##      'cd tests', 'ls'
##      'python3', '-m', 'pytest', '-v', '-x'
#    ]



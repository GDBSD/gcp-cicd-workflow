
# Each step specified in the cloudbuild.yaml is a separate, ephemeral run of a docker image.artifacts:
# As an aid to someone unfamiliar with Docker just about every element in this file
# is documented.

# Mastering Google Cloud Build Config Syntax
# https://medium.com/@davidstanke/mastering-google-cloud-build-config-syntax-8c3024607daf

# Syntax comments:
#   "entrypoint" configures a container that will run as an executable.
#   'dir" the working directory is set to /workspace/<dir>.
#   "/bin/bash" Is an Ubuntu command used to link to bash.artifacts:
#   The "-c" bin/bash argument overrides the rest of the command line from that point on,
#     so that it's no longer going through bash's option handling.artifacts:
#   The "-m" Python argument is the module name. Python searches sys.path for the named module
#      and execute its contents as the __main__ module
#  bash -c runs passed arguments as a single bash script. It doesn't separate passed arguments
#    into separate scripts.
#    ; in bash ends a script line, and the following after semicolon is interpreted as a new script line.

############################ BEGIN CI ##########################################

steps:
  # Step 0 - Create the environment
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: '/bin/bash'
  args:
    [
      '-c',
      'python3 -m venv /workspace/gcp_cicd'
    ]

  # Step 1 - Clone the GitHub repo
- name: 'gcr.io/cloud-builders/git'
  args:
    [
      'clone', '--recurse-submodules',
      'https://github.com/GDBSD/gcp-cicd-workflow'
    ]

  # Step 2 - Checkout the branch we just pushed
  # Variable $COMMIT_SHA provided by the Cloud Build so we test the correct commit.
- name: 'gcr.io/cloud-builders/git'
  args:
    [
      'checkout',
      '$COMMIT_SHA'
    ]
  dir: 'gcp-cicd-workflow'

  # Step 3 - Install the dependencies
  # Installs any dependencies listed in the project's requirements.txt.
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: 'gcp_cicd/bin/pip'
  args:
    [
      'install',
      '-V',
      '-r',
      'requirements.txt'
    ]

  # Step 4 - Run the tests
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: '/bin/bash'
  args: ['-c', 'source gcp_cicd/bin/activate; python3 -m pytest tests/']

############################ END CI ##########################################

############################ BEGIN CD ##########################################

# Building, testing, and deploying artifacts
# https://cloud.google.com/cloud-build/docs/configuring-builds/build-test-deploy-artifacts

# Deploying to Cloud Run
# https://cloud.google.com/cloud-build/docs/deploying-builds/deploy-cloud-run

#- name: 'gcr.io/cloud-builders/gcloud'
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  args:
    [
      'run', 'deploy', 'helloworld',
      '--image', 'gcr.io/gdb-gcp-cicd/gcr.io/gdb-gcp-cicd/helloworld',
      '--region', 'us-central1',
      '--platform', 'managed', '--allow-unauthenticated'
    ]








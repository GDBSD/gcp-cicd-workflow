steps:
# ↓↓↓↓↓↓↓ Start of Continuous Integration Part ↓↓↓↓↓↓↓↓↓↓↓↓ #####
- name: 'gcr.io/cloud-builders/git'
  args:
    [
      'clone',
      '--recurse-submodules',
      'https://github.com/GDBSD/gcp-cicd-workflow'
    ]

  # Variable $COMMIT_SHA provided by the Cloud Build so we test the correct commit.
- name: 'gcr.io/cloud-builders/git'
  args:
    [
      'checkout',
      '$COMMIT_SHA'
    ]
  dir: 'gcp-cicd-workflow'

  # Cloud Build automatically substitutes $PROJECT_ID for your Project ID
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: '/bin/bash'
  args:
    [
      '-c',
      'python3 -m venv /workspace/venv',
      'pip install --upgrade pip',
    ]
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: 'venv/bin/pip'
  args: ['install', '-V', '-r', 'requirements.txt']
  # Installs any dependencies listed in the project's requirements.txt.
- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
  entrypoint: '/bin/bash' # entrypoint: 'venv/bin/python'
  args: ['-m', 'pytest', '-v']
  # runs pytest from the virtual environment (with all requirements)
  # using the verbose flag so you can see each individual test.
#- name: 'gcr.io/$PROJECT_ID/python-cloudbuild'
#  entrypoint: 'venv/bin/pylint'
#  args: ['my_module/']
  #runs pylint against the module my_module contained one folder under the project root.

